[tool.isort]
profile = "black"
filter_files = true
force_single_line = true

[tool.flake8]
max-line-length = 100
require-plugins = [
    # https://github.com/DmytroLitvinov/awesome-flake8-extensions

    ### Bugs & Code-Smells
    "flake8-bugbear",
    "flake8-secure-coding-standard",
    "flake8-bandit",
    "flake8-builtins",

    ### Clean Code
    "flake8-comprehensions",
    "flake8-simplify",
    "flake8-eradicate",

    ### Limitations
    "flake8-blind-except",
    "flake8-print",

    ### Documentation
    "flake8-comments",
    # flake8-docstrings
    # flake8-rst-docstrings

    ### Test-Improvements
    "flake8-assertive",
]

extend-ignore = [
    # black-formatter-specific
    "E203",
    # DOCString
    "D100",
    "D102",
    "D103",
    "G200",
    # handled by ruff
    "S403",
    "S404",
]

per-file-ignores = """
# asserts (in tests are ok), also allow print() instead of logger,
# also allow executing scripts
*/tests/*: SCS108, S101, T201, S404, S602, SCS103, SIM117
# allow print() and commented out code
*/examples/*: T201, E800
"""

count = true
statistics = true

[tool.ruff]  # TODO: once stable it replaces flake8, pyupgrade, isort, ...
line-length = 100
select = [
    "A",    # flake8-builtins
    "ANN", # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",    # Bugbear
    "C",
    "COM", # flake8-commas
    #    "CPY",  # flake8-copyright
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    #    "D",    # pydocstyle, TODO: activate
    "E",    # pycodestyle errors
    "ERA",  # eradicate commented out code
    "F",    # pyflakes
    #    "FA",   # flake8-future-annotations
    "FBT",  # boolean traps
    "FLY",  # flynt
    "FURB", # refurb
    "G",    # flake8-logging-format
    #    "I",    # incomplete isort
    "INP",  # flake8-no-pep420
    "LOG",  # flake8-logging
    "N",    # naming
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-vet
    "PERF", # Perflint
    "PL",   # Pylint
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "RUF",  # Ruff-specific rules
    "S",    # bandit, security
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "T10",  # flake8-print
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]
ignore = [
    "N802", "N803", "N806", "N815", "N816", # naming (si-units should stay)
    "PLR2004", # magic values
    "TID252", # relative imports from parent
    "PLR0904", # complexity
    "PLR0911", "PLR0912", # complexity
    "PLR0913", "PLR0915", # complexity
    "C901", # complexity
    "E203", # whitespace before ':' (black-default)
    "ANN101", "ANN102", # self & cls not type-annotated
    "ANN401",  # Any as valid type
    "COM812", # trailing comma, same line
]
target-version = "py38"
preview = true

[tool.ruff.per-file-ignores]
"*/tests/**" = ["ARG", "S", "D"]
"*/examples/**" = ["INP001"]  # no namespace

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
