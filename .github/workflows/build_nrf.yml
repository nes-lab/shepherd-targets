name: Build nRF52

on:
  push:
    branches: [ "main", "dev" ]
  workflow_call:

jobs:
  build_gcc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subproject:
          - nrf52_demo_rf
          - nrf52_testable
          - nrf52_deep_sleep

    env:
      GNU_INSTALL_LINK: https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
      GNU_INSTALL_ROOT: "${{ github.workspace }}/gcc-arm-none-eabi-10.3-2021.10/bin/"
      # updates: https://developer.arm.com/downloads/-/gnu-rm
      SDK_LINK: https://nsscprodmedia.blob.core.windows.net/prod/software-and-other-downloads/sdks/nrf5/binaries/nrf5_sdk_17.1.0_ddde560.zip
      SDK_ROOT: "${{ github.workspace }}/nRF5_SDK_17.1.0_ddde560"
      # updates: https://www.nordicsemi.com/Products/Development-software/nrf5-sdk/download
      # -> the two _ROOT environment variables are important for the make-file

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Install dependencies 🔧
        run: sudo apt update && sudo apt install -y build-essential wget unzip

      - name: Download GNU ARM Embedded Toolchain 🔽
        run: "wget -q --tries 3 ${{ env.GNU_INSTALL_LINK }} --output-document=gcc-arm.tar.bz2"
        working-directory: "${{ github.workspace }}"
      - name: Extract GCC ARM cross-compiler ⚔
        run: "tar -xf gcc-arm.tar.bz2"
        working-directory: "${{ github.workspace }}"

      - name: Download nRF5 SDK 🔽
        run: "wget -q --tries 3 ${{ env.SDK_LINK }} --output-document=sdk_nrf.zip"
        working-directory: "${{ github.workspace }}"
      - name: Extract nRF5 SDK
        run: "unzip -q sdk_nrf.zip"
        working-directory: "${{ github.workspace }}"

      - name: Build the project "${{ matrix.subproject }}" 🧱
        run: make
        working-directory: "${{ github.workspace }}/${{ matrix.subproject }}"

      - name: Upload artifacts to github 🔼
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.subproject }}"
          path: "${{ github.workspace }}/${{ matrix.subproject }}/_build/build.elf"

  build_segger:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subproject:
          - nrf52_rf_survey

    env:
      SEGGER_LINK: https://www.segger.com/downloads/embedded-studio/Setup_EmbeddedStudio_ARM_v730_linux_x64.tar.gz
      SEGGER_UNPACK: "${{ github.workspace }}/arm_segger_embedded_studio_v730_linux_x64/"
      SEGGER_PATH: "${{ github.workspace }}/segger_studio"
      # updates: https://www.segger.com/downloads/embedded-studio/
      PROJECT_FILE: "${{ github.workspace }}/shepherd-targets/nrf52_rf_survey/trafficbench/target/nrf52840/project_ses/TrafficBench.emProject"
      PROJECT_ELF: "${{ github.workspace }}/shepherd-targets/nrf52_rf_survey/trafficbench/target/nrf52840/project_ses/Output/Release/Exe/TrafficBench.elf"

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Install dependencies 🔧
        run: sudo apt update && sudo apt install -y build-essential wget unzip

      - name: Download Segger Embedded Studio 🔽
        run: "wget -q --tries 3 ${{ env.SEGGER_LINK }} --output-document=segger_studio.tar.gz"
        working-directory: "${{ github.workspace }}"
      - name: Extract Archive ⚔
        run: "tar -xf segger_studio.tar.gz"
        working-directory: "${{ github.workspace }}"
      - name: Install Studio
        run: "yes 'yes' | ./install_segger_embedded_studio --copy-files-to ${{ env.SEGGER_PATH }}"
        working-directory: "${{ env.SEGGER_UNPACK }}"
      - name: Update Package-Manager
        run: "./bin/pkg update"
        working-directory: "${{ env.SEGGER_PATH }}"
      - name: Install CMSIS-Core Package ⚔
        run: "yes 'y' | ./bin/pkg install CMSIS-CORE_V5"
        working-directory: "${{ env.SEGGER_PATH }}"

      - name: Build the project "${{ matrix.subproject }}" 🧱
        run: "./bin/emBuild -config 'Release' ${{ env.PROJECT_FILE }}"
        working-directory: "${{ env.SEGGER_PATH }}"

      - name: Upload artifacts to github 🔼
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.subproject }}"
          path: "${{ env.PROJECT_ELF }}"

